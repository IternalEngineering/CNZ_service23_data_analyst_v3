-- Database Migration for service23_data_analyst_insights table
-- This table stores insights generated by the data analyst agent

-- Drop table if exists (for development/testing)
-- DROP TABLE IF EXISTS service23_data_analyst_insights;

-- Create the insights table
CREATE TABLE IF NOT EXISTS service23_data_analyst_insights (
    -- Primary key
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),

    -- Location identifiers
    city VARCHAR(255) NOT NULL,
    country_code VARCHAR(2) NOT NULL,

    -- Success criteria reference
    success_criteria TEXT,

    -- Insight content
    insight_summary TEXT NOT NULL,
    detailed_analysis TEXT NOT NULL,

    -- Metadata
    data_sources_used JSONB DEFAULT '[]'::jsonb,
    confidence_score DECIMAL(3,2) CHECK (confidence_score >= 0 AND confidence_score <= 1),
    recommendations JSONB DEFAULT '[]'::jsonb,

    -- Timestamps
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    -- Alert tracking
    alert_sent BOOLEAN DEFAULT FALSE,
    alert_id VARCHAR(255),

    -- Constraints
    CONSTRAINT valid_confidence CHECK (confidence_score IS NULL OR (confidence_score >= 0 AND confidence_score <= 1))
);

-- Create indexes for efficient querying
CREATE INDEX IF NOT EXISTS idx_insights_city_country
    ON service23_data_analyst_insights(city, country_code);

CREATE INDEX IF NOT EXISTS idx_insights_created_at
    ON service23_data_analyst_insights(created_at DESC);

CREATE INDEX IF NOT EXISTS idx_insights_confidence
    ON service23_data_analyst_insights(confidence_score DESC);

CREATE INDEX IF NOT EXISTS idx_insights_alert_sent
    ON service23_data_analyst_insights(alert_sent);

-- Create updated_at trigger
CREATE OR REPLACE FUNCTION update_insights_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_update_insights_timestamp
    BEFORE UPDATE ON service23_data_analyst_insights
    FOR EACH ROW
    EXECUTE FUNCTION update_insights_updated_at();

-- Add comments for documentation
COMMENT ON TABLE service23_data_analyst_insights IS
    'Stores insights generated by the data analyst agent from disparate data sources';

COMMENT ON COLUMN service23_data_analyst_insights.id IS
    'Unique identifier for the insight';

COMMENT ON COLUMN service23_data_analyst_insights.city IS
    'City name for the insight';

COMMENT ON COLUMN service23_data_analyst_insights.country_code IS
    'ISO 3166-1 alpha-2 country code';

COMMENT ON COLUMN service23_data_analyst_insights.success_criteria IS
    'Success criteria used for analysis (from onboarding data)';

COMMENT ON COLUMN service23_data_analyst_insights.insight_summary IS
    'Brief summary of the insight (max 500 chars recommended)';

COMMENT ON COLUMN service23_data_analyst_insights.detailed_analysis IS
    'Comprehensive analysis connecting disparate data sources';

COMMENT ON COLUMN service23_data_analyst_insights.data_sources_used IS
    'JSON array of data source table names used in analysis';

COMMENT ON COLUMN service23_data_analyst_insights.confidence_score IS
    'Confidence score of the insight (0.0 to 1.0)';

COMMENT ON COLUMN service23_data_analyst_insights.recommendations IS
    'JSON array of actionable recommendations';

COMMENT ON COLUMN service23_data_analyst_insights.alert_sent IS
    'Whether an alert was created on the web platform';

COMMENT ON COLUMN service23_data_analyst_insights.alert_id IS
    'Reference to the created alert (if applicable)';

-- Grant permissions (adjust user as needed)
-- GRANT SELECT, INSERT, UPDATE ON service23_data_analyst_insights TO urbanzero_app;
-- GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO urbanzero_app;

-- Example query to verify table creation
-- SELECT table_name, column_name, data_type, is_nullable
-- FROM information_schema.columns
-- WHERE table_name = 'service23_data_analyst_insights'
-- ORDER BY ordinal_position;
